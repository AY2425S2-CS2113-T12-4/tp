@startuml
hide circle
skinparam classAttributeIconSize 0
hide footbox
actor User
participant ":InputManager" as IM
participant ":InputParser" as IP
participant ":EditAlertCommand" as EAC
participant ":AlertParser" as AP
participant ":BudgetManager" as BM
participant ":Alert" as A
participant ":Ui" as UI

User -> IM: Enters "edit-alert 400" command
activate IM
IM -> IP: parseInput(userInput)
activate IP
create EAC
IP -> EAC: initialize with description
activate EAC
EAC --> IP
deactivate EAC
IP --> IM: Return EditAlertCommand object
deactivate IP

IM -> EAC: execute(budgetManager)
activate EAC
create AP
EAC -> AP: new AlertParser(description)
activate AP
AP-->EAC
deactivate AP
EAC -> AP: parse()
activate AP
AP --> EAC: Return new amount
deactivate AP
EAC -> BM: getBudgetAlert()
activate BM
BM -> A: editAlertAmount(amount)
activate A
A -> UI: printSetBudgetAlert(amount, true)
activate UI
UI --> A
deactivate UI
A--> BM
deactivate A
BM--> EAC
deactivate BM
EAC -> BM: checkBudgetAlert()
activate BM
BM -> A:checkAlert(totalExpenses)
activate A
opt Total expenses exceed alert amount
A -> UI: printCheckAlert(totalExpenses, alertAmount)
activate UI
UI --> A
deactivate UI
else Total expenses equals alert amount
A -> UI: printHitAlert(totalExpenses)
activate UI
UI --> A
deactivate UI
end
A --> BM
deactivate A
BM--> EAC
deactivate BM

deactivate A
EAC --> IM
deactivate EAC
IM --> User: Show success message
deactivate IM
@enduml